package data

import (
	"context"
	"crypto/sha256"
	"database/sql"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/ebitezion/backend-framework/internal/validator"
	"golang.org/x/crypto/bcrypt"
)

type Users struct {
	ID          int64    `json:"id"`
	CreatedAt   string   `json:"-"`
	Name        string   `json:"name"`
	Username    string   `json:"username"`
	Email       string   `json:"email"`
	Password    password `json:"-"`
	Activated   bool     `json:"activated"`
	Version     int      `json:"-"`
	PhoneNumber string   `json:"-"`
}

// Declare a new AnonymousUser variable.
var AnonymousUser = &Users{}

// Check if a Users instance is the AnonymousUser.
func (u *Users) IsAnonymous() bool {
	return u == AnonymousUser
}

// Define a custom ErrDuplicateEmail error.
var (
	ErrDuplicateEmailOrUsername = errors.New("Duplicate email or username")
)

// Create a custom password type which is a struct containing the plaintext and hashed
// versions of the password for a user. The plaintext field is a *pointer* to a string,
// so that we're able to distinguish between a plaintext password not being present in
// the struct at all, versus a plaintext password which is the empty string "".
type password struct {
	plaintext *string
	hash      []byte
}

// Create a UserModel struct which wraps the connection pool.
type UserModel struct {
	DB *sql.DB
}

// The Set() method calculates the bcrypt hash of a plaintext password, and stores both
// the hash and the plaintext versions in the struct.
func (p *password) Set(plaintextPassword string) error {
	hash, err := bcrypt.GenerateFromPassword([]byte(plaintextPassword), 12)
	if err != nil {
		return err
	}
	p.plaintext = &plaintextPassword
	p.hash = hash
	return nil
}

// The Matches() method checks whether the provided plaintext password matches the
// hashed password stored in the struct, returning true if it matches and false
// otherwise.
func (p *password) Matches(plaintextPassword string) (bool, error) {
	err := bcrypt.CompareHashAndPassword(p.hash, []byte(plaintextPassword))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			return false, nil
		default:
			return false, err
		}
	}
	return true, nil
}

func ValidateEmail(v *validator.Validator, email string) {
	v.Check(email != "", "email", "must be provided")
	v.Check(validator.Matches(email, validator.EmailRX), "email", "must be a valid email address")
}
func ValidatePasswordPlaintext(v *validator.Validator, password string) {
	v.Check(password != "", "password", "must be provided")
	v.Check(len(password) >= 8, "password", "must be at least 8 bytes long")
	v.Check(len(password) <= 72, "password", "must not be more than 72 bytes long")
}
func ValidateUsers(v *validator.Validator, user *Users) {
	v.Check(user.Name != "", "name", "must be provided")
	v.Check(len(user.Name) <= 500, "name", "must not be more than 500 bytes long")
	// Call the standalone ValidateEmail() helper.
	ValidateEmail(v, user.Email)
	// If the plaintext password is not nil, call the standalone
	// ValidatePasswordPlaintext() helper.
	if user.Password.plaintext != nil {
		ValidatePasswordPlaintext(v, *user.Password.plaintext)
	}
	// If the password hash is ever nil, this will be due to a logic error in our
	// codebase (probably because we forgot to set a password for the user). It's a
	// useful sanity check to include here, but it's not a problem with the data
	// provided by the client. So rather than adding an error to the validation map we
	// raise a panic instead.
	if user.Password.hash == nil {
		fmt.Println("missing password hash for user")
	}
}

//DB HELPER

// // Insert a new record in the database for the user. Note that the id, created_at and
// // version fields are all automatically generated by our database, so we use the
// // RETURNING clause to read them into the Users struct after the insert.
// func (m UserModel) Insert(user *Users) error {
// 	query := `
// 	INSERT INTO accounts_auth (name, email, password_hash, activated)
// 	VALUES (?, ?, ?, ?)
// 	RETURNING id, created_at, version`
// 	args := []interface{}{user.Name, user.Email, user.Password.hash, user.Activated}
// 	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
// 	defer cancel()
// 	// If the table already contains a record with this email address, then when we try
// 	// to perform the insert there will be a violation of the UNIQUE "users_email_key"
// 	// constraint that we set up in the previous chapter. We check for this error
// 	// specifically, and return custom ErrDuplicateEmail error instead.
// 	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.ID, &user.CreatedAt, &user.Version)
// 	if err != nil {
// 		switch {
// 		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
// 			return ErrDuplicateEmail
// 		default:
// 			return err
// 		}
// 	}
// 	return nil
// }

func (m UserModel) Insert(user *Users) error {
	insertQuery := `
	INSERT INTO accounts_auth (name,username, email, password, activated,phoneNumber)
	VALUES (?, ?, ? ,?,?,?)`
	args := []interface{}{user.Name, user.Username, user.Email, user.Password.hash, user.Activated, user.PhoneNumber}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()

	// Execute the INSERT query
	result, err := m.DB.ExecContext(ctx, insertQuery, args...)
	if err != nil {
		switch {
		case strings.Contains(err.Error(), "Duplicate entry"):
			return ErrDuplicateEmailOrUsername
		default:
			return err
		}
	}

	// Retrieve the last inserted ID
	lastInsertID, err := result.LastInsertId()
	if err != nil {
		return err
	}
	user.ID = lastInsertID
	// // Use QueryRowContext to retrieve other fields
	// selectQuery := `
	// SELECT id, created_at, version
	// FROM accounts_auth
	// WHERE id = ?`
	// err = m.DB.QueryRowContext(ctx, selectQuery, lastInsertID).Scan(&user.ID, &user.CreatedAt, &user.Version)
	// if err != nil {
	// 	return err
	// }

	return nil
}

// Retrieve the Users details from the database based on the user's email address.
// Because we have a UNIQUE constraint on the email column, this SQL query will only
// return one record (or none at all, in which case we return a ErrRecordNotFound error).
//

// id
// name
// username
// email
// activated
// password_hash
// created_at
// version
func (m UserModel) GetByEmail(email string) (*Users, error) {
	query := `
	SELECT id, name, username, email, activated, password, timestamp, version
	FROM accounts_auth
	WHERE email = ?`
	var user Users
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRowContext(ctx, query, email).Scan(
		&user.ID,
		&user.Name,
		&user.Username,
		&user.Email,
		&user.Activated,
		&user.Password.hash,
		&user.CreatedAt,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	return &user, nil
}

// Update the details for a specific user. Notice that we check against the version
// field to help prevent any race conditions during the request cycle, just like we did
// when updating a movie. And we also check for a violation of the "users_email_key"
// constraint when performing the update, just like we did when inserting the user
// record originally.
func (m UserModel) Update(user *Users) error {
	query := `
	UPDATE accounts_auth
	SET name = ?, username = ?,email = ?, password_hash = ?, activated = ?, version = version + 1
	WHERE id = ? AND version = ?
	RETURNING version`
	args := []interface{}{
		user.Name,
		user.Username,
		user.Email,
		user.Password.hash,
		user.Activated,
		user.ID,
		user.Version,
	}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(&user.Version)
	if err != nil {
		switch {
		case err.Error() == `pq: duplicate key value violates unique constraint "users_email_key"`:
			return ErrDuplicateEmailOrUsername

		case errors.Is(err, sql.ErrNoRows):
			return ErrEditConflict
		default:
			return err
		}
	}
	return nil
}

func (m UserModel) GetForToken(tokenScope, tokenPlaintext string) (*Users, error) {
	// Calculate the SHA-256 hash of the plaintext token provided by the client.
	// Remember that this returns a byte *array* with length 32, not a slice.
	tokenHash := sha256.Sum256([]byte(tokenPlaintext))
	// Set up the SQL query.
	query := `
	SELECT accounts_auth.id, accounts_auth.created_at, accounts_auth.name, accounts_auth.username, accounts_auth.email, accounts_auth.password_hash, accounts_auth.activated, accounts_auth.version
	FROM accounts_auth
	INNER JOIN tokens
	ON accounts_auth.id = tokens.user_id
	WHERE tokens.hash = ?
	AND tokens.scope = ?
	AND tokens.expiry > ?`
	// Create a slice containing the query arguments. Notice how we use the [:] operator
	// to get a slice containing the token hash, rather than passing in the array (which
	// is not supported by the pq driver), and that we pass the current time as the
	// value to check against the token expiry.
	args := []interface{}{tokenHash[:], tokenScope, time.Now()}
	var user Users
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
	defer cancel()
	// Execute the query, scanning the return values into a Users struct. If no matching
	// record is found we return an ErrRecordNotFound error.
	err := m.DB.QueryRowContext(ctx, query, args...).Scan(
		&user.ID,
		&user.CreatedAt,
		&user.Name,
		&user.Username,
		&user.Email,
		&user.Password.hash,
		&user.Activated,
		&user.Version,
	)
	if err != nil {
		switch {
		case errors.Is(err, sql.ErrNoRows):
			return nil, ErrRecordNotFound
		default:
			return nil, err
		}
	}
	// Return the matching user.
	return &user, nil
}
